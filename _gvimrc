
"ウィンドウの位置、サイズ設定
let g:save_window_file = expand('~/.vimwinpos')
augroup SaveWindow
  autocmd!
  autocmd VimLeavePre * call s:save_window()
  function! s:save_window()
	let options = [
	  \ 'set columns=' . &columns,
	  \ 'set lines=' . &lines,
	  \ 'winpos ' . getwinposx() . ' ' . getwinposy(),
	  \ ]
	call writefile(options, g:save_window_file)
  endfunction
augroup END

if filereadable(g:save_window_file)
  execute 'source' g:save_window_file
endif


"----------------------------------------
" 表示設定
"----------------------------------------
"横スクロールバー表示
set guioptions+=b
"ツールバー非表示
set guioptions-=T
"メニュー非表示
set guioptions-=m


"全角スペース強調表示
augroup highlightIdegraphicSpace
	autocmd!
	autocmd ColorScheme * highlight IdeographicSpace term=underline ctermbg=DarkCyan guibg=DarkCyan
	autocmd VimEnter,WinEnter * match IdeographicSpace /　/
augroup END

"color scheme
NeoBundleSource vim-hybrid
colorscheme hybrid



if has('multi_byte_ime') || has('xim')
  "起動直後の挿入モードでは日本語入力を有効にしない
  set iminsert=0 imsearch=0
  if has('xim') && has('GUI_GTK')
    "XIMの入力開始キー
    "set imactivatekey=C-space
  endif
  "IMEの状態をカラー表示
  highlight CursorIM guifg=NONE guibg=Green
  "挿入モード終了時に日本語入力をオフ
  inoremap <ESC> <ESC>:set iminsert=0<CR>
endif


"フォント設定
if has('xfontset')
"  set guifontset=a14,r14,k14
elseif has('mac')
    set guifont=Inconsolata_for_Powerline:h14
    set guifontwide=Ricty:h14
elseif has('win32') || has('win64')
    set guifont=Consolas_for_Powerline_FixedD:h13
    set guifontwide=Consolas:h13:cSHIFTJIS
elseif has('unix')
endif

"印刷用フォント
if has('printer')
  if has('win32') || has('win64')
"    set printfont=MS_Mincho:h12:cSHIFTJIS
"    set printfont=MS_Gothic:h12:cSHIFTJIS
  endif
endif




" 個別のタブの表示設定をします
function! GuiTabLabel()
  " タブで表示する文字列の初期化をします
  let l:label = ''

  " タブに含まれるバッファ(ウィンドウ)についての情報をとっておきます。
  let l:bufnrlist = tabpagebuflist(v:lnum)

  " 表示文字列にバッファ名を追加します
  " パスを全部表示させると長いのでファイル名だけを使います 詳しくは help fnamemodify()
  let l:bufname = fnamemodify(bufname(l:bufnrlist[tabpagewinnr(v:lnum) - 1]), ':t')
  " バッファ名がなければ No title としておきます。ここではマルチバイト文字を使わないほうが無難です
  let l:label .= l:bufname == '' ? 'No title' : l:bufname

  " タブ内にウィンドウが複数あるときにはその数を追加します(デフォルトで一応あるので)
  let l:wincount = tabpagewinnr(v:lnum, '$')
  if l:wincount > 1
	let l:label .= '[' . l:wincount . ']'
  endif

  " このタブページに変更のあるバッファがるときには '[+]' を追加します(デフォルトで一応あるので)
  for bufnr in l:bufnrlist
	if getbufvar(bufnr, "&modified")
	  let l:label .= '[+]'
	  break
	endif
  endfor

  " 表示文字列を返します
  return l:label
endfunction

" guitablabel に上の関数を設定します
" その表示の前に %N というところでタブ番号を表示させています
set guitablabel=%N:\ %{GuiTabLabel()}



